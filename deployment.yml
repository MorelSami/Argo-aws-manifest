#deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: amazon-deployment
  namespace: default
  labels:
    app: amazon-app
spec:
  replicas: 5
  selector:
    matchLabels:
      app: amazon-app
      tier: frontend
      version: 1.0.0
#pod tempalte
  template:
    metadata:
      labels:
        app: amazon-app
        tier: frontend
        version: 1.0.0
    spec: # Pod spec
      containers:
      - name: amazon-container
        image: smorel237/amazon:2
        ports:
        - containerPort: 3000
        
        
---
apiVersion: v1
kind: Service
metadata:
  name: amazon-service
  labels:
    app: amazon-app
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
  selector:
    app: amazon-app


---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-prod
#   annotations:
#     cert-manager.io/issuer: letsencrypt-nginx
spec:
#   tls:
#   - hosts:
#     - amazon.skm237.site
#     secretName: letsencrypt-nginx
  rules:
    - host: amazon.smk237.site
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: amazon-service
                port:
                  number: 3000
  ingressClassName: nginx


---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: letsencrypt-nginx
  # namespace: 
spec:
  # ACME issuer configuration
  # `email` - the email address to be associated with the ACME account (make sure it's a valid one)
  # `server` - the URL used to access the ACME serverâ€™s directory endpoint
  # `privateKeySecretRef` - Kubernetes Secret to store the automatically generated ACME account private key
  acme:
    email: mksami237@gmail.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-nginx-private-key
    solvers:
      # Use the HTTP-01 challenge provider
      - http01:
          ingress:
            class: nginx
